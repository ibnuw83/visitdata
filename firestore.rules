/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership constraints.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only to the user themselves and admins.
 * - /destinations/{destinationId}: Stores information about tourist destinations. Publicly readable.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable.
 * - /countries/{countryId}: Stores countries. Publicly readable.
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data, write-protected behind a lock and role-based unlock-request approval.
 * - /unlock-requests/{requestId}: Stores unlock requests. Accessible to the requester and admins.
 * - /settings/app: Stores global app settings. Only accessible to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All writes require user authentication.
 * - Data validation is relaxed in prototyping mode, focusing on authorization and relational integrity.
 * - Strict ownership is enforced for user profiles.
 * - Visit data modifications are controlled by unlock requests.
 *
 * Denormalization for Authorization:
 * - VisitData.locked: Used to prevent unauthorized modifications.
 * - UnlockRequest.status: Controls the approval status of unlock requests.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and manage their own profile data.
     * @path /users/{userId}
     * @allow (get, list): Authenticated user can read their own profile.
     * @allow (create): Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (update, delete): Authenticated user can update/delete their own profile.
     * @deny (get, list): Any user trying to read other user's profile.
     * @deny (create, update, delete): Any user trying to modify other user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read destination data, but no one to modify it directly.
     * @path /destinations/{destinationId}
     * @allow (get, list): Any user can read destination data.
     * @deny (create, update, delete): No one can modify destination data directly.
     * @principle Public read, owner-only writes (not applicable as there is no owner in this data).
     */
    match /destinations/{destinationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read category data, but no one to modify it directly.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No one can modify category data directly.
     * @principle Public read, owner-only writes (not applicable as there is no owner in this data).
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read country data, but no one to modify it directly.
     * @path /countries/{countryId}
     * @allow (get, list): Any user can read country data.
     * @deny (create, update, delete): No one can modify country data directly.
     * @principle Public read, owner-only writes (not applicable as there is no owner in this data).
     */
    match /countries/{countryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to visit data, ensuring it is locked unless specifically unlocked via an unlock request.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list): Any user can read visit data.
     * @deny (create, update, delete): Data can only be modified when unlocked, through an unlock request.
     * @principle Data modification based on the state of 'locked' property and unlock requests.
     */
    match /destinations/{destinationId}/visits/{visitId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isManagerOfDestination(destinationId) {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations.hasAny([destinationId]);
        }

        function isAdmin() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        function getUnlockRequest(destinationId, year, month) {
            return get(/databases/$(database)/documents/unlock-requests/$(destinationId)-$(year)-$(month));
        }

        function isVisitDataUnlocked(destinationId, year, month) {
            let unlockRequest = getUnlockRequest(destinationId, year, month);
            return exists(unlockRequest.data.status) &&
                unlockRequest.data.status == 'approved';
        }

        function isVisitDataLocked() {
            return resource.data.locked == true;
        }

        function isAllowedToModifyVisitData(destinationId) {
            return isSignedIn() && (isManagerOfDestination(destinationId) || isAdmin());
        }

        allow get, list: if true;

        allow create: if isSignedIn(); // TODO: Visit data should be managed by UnlockRequest

        allow update: if isSignedIn(); // TODO: Visit data should be managed by UnlockRequest

        allow delete: if isSignedIn(); // TODO: Visit data should be managed by UnlockRequest
    }

    /**
     * @description Controls access to unlock requests, allowing creation and admin approval.
     * @path /unlock-requests/{requestId}
     * @allow (get, list): Requester and admin can get the unlock request.
     * @allow (create): Signed-in users can create unlock requests.
     * @allow (update): Admins can update the status of unlock requests.
     * @deny (delete): Only admins can delete unlock requests.
     * @principle Role-based access control for unlock request management.
     */
    match /unlock-requests/{requestId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isRequester(requestedBy) {
            return request.auth.uid == requestedBy;
        }

        function isAdmin() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        allow get: if isSignedIn() && (resource.data.requestedBy == request.auth.uid || isAdmin());
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.requestedBy == request.auth.uid;
        allow update: if isSignedIn() && isAdmin();
        allow delete: if false;
    }

    /**
     * @description Allows admins to read and manage app settings.
     * @path /settings/app
     * @allow (get): Any user can read app settings.
     * @allow (update): Only admins can update app settings.
     * @deny (create, delete): No one can create or delete the settings document.
     * @principle Role-based access control for app settings.
     */
    match /settings/app {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if isSignedIn() && isAdmin();
        allow delete: if false;
    }
  }
}