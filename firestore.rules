/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 *  - Users have roles ("admin", "pengelola") which determine their permissions.
 *  - Owners are granted full access to their own data trees under `/users/{userId}`.
 *  - Some data (like destination categories and countries) is intended to be publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  The {userId} must match the authenticated user's UID.
 * - /destinations/{destinationId}: Stores destination information.
 * - /categories/{categoryId}: Stores destination categories (publicly readable).
 * - /countries/{countryId}: Stores countries (publicly readable).
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data for each destination.
 * - /unlock-requests/{requestId}: Stores unlock requests from managers.
 * - /settings/app: Stores global application settings.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the `/categories` and `/countries` collections.
 * - The 'app' document in `/settings` is publicly readable but only writable by an admin.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * - The `UserProfile` includes a `role` field that is used to determine administrative privileges.
 * - The `VisitData` includes a `locked` field that determines whether data entry is allowed.
 * - The `UnlockRequest` includes `destinationId` and `month/year` that is used to unlock data entry.
 *
 * Structural Segregation:
 * - No explicit structural segregation is used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the user themselves can read/write their profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create /users/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create /users/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects destination documents. Anyone can read destinations; only authenticated users can create/update/delete.
     * @path /destinations/{destinationId}
     * @allow (get, list) - Any user, signed in or not, can read destination data.
     * @allow (create) - Any signed-in user can create a destination.
     * @allow (update, delete) - Only signed-in users can update/delete a destination.
     * @deny (create) - Unauthenticated users cannot create destinations.
     * @deny (update, delete) - Unauthenticated users cannot update/delete destinations.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /destinations/{destinationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to destination categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user, signed in or not, can read category data.
     * @deny (create, update, delete) - No one can create, update or delete categories through the client.
     * @principle Allows completely public read access and prohibits write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to countries.
     * @path /countries/{countryId}
     * @allow (get, list) - Any user, signed in or not, can read country data.
     * @deny (create, update, delete) - No one can create, update or delete countries through the client.
     * @principle Allows completely public read access and prohibits write access.
     */
    match /countries/{countryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Protects monthly visit data for destinations.  Only authenticated users can modify visit data.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list) - Any user can read visit data.
     * @allow (create, update, delete) - Only signed-in users can create, update, or delete visit data.
     * @deny (create) - Unauthenticated users cannot create visit data.
     * @deny (update, delete) - Unauthenticated users cannot update or delete visit data.
     * @principle Restricts writes to authenticated users.
     */
    match /destinations/{destinationId}/visits/{visitId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Protects unlock requests. Only authenticated users can create unlock requests.
     * @path /unlock-requests/{requestId}
     * @allow (create) - Any signed-in user can create an unlock request.
     * @deny (get, list, update, delete) - No one can get, list, update, or delete unlock requests through the client.
     * @principle Restricts creation to authenticated users and prohibits other operations.
     */
    match /unlock-requests/{requestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }

    /**
     * @description Protects application settings. Allows public read access, but restricts writes to admins.
     * @path /settings/app
     * @allow (get) - Any user can read the app settings.
     * @allow (update) - Only admins can update the app settings.
     * @deny (create, delete) - No one can create or delete the app settings document through the client.
     * @principle Restricts writes to users with the 'admin' role.
     */
    match /settings/app {
      function isAdmin() {
          return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get: if true;
      allow create, delete: if false;
      allow update: if isAdmin();
    }
  }
}