rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of their UID in the /admins collection.
     * @returns {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {bool} True if the user IDs match, false otherwise.
     * @example isOwner("someUserId")
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId - The user ID of the document owner.
     * @returns {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)).data.userId == userId;
    }

    /**
     * @description Defines security rules for user profiles.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow list: if isSignedIn();
      allow get: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for the admins collection.
     * @path /admins/{adminId}
     */
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Defines security rules for tourist destinations.
     * @path /destinations/{destinationId}
     */
    match /destinations/{destinationId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();

      /**
       * @description Defines security rules for visit data nested under a specific destination.
       * @path /destinations/{destinationId}/visits/{visitId}
       */
      match /visits/{visitId} {
        allow get, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
      }
    }

    /**
     * @description Defines security rules for destination categories.
     * @path /categories/{categoryId}
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    /**
     * @description Defines security rules for countries.
     * @path /countries/{countryId}
     */
    match /countries/{countryId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines security rules for unlock requests.
     * @path /unlock-requests/{requestId}
     */
    match /unlock-requests/{requestId} {
      allow create: if isSignedIn(); 
      allow get, list, update, delete: if isAdmin();
    }

    /**
     * @description Defines security rules for application settings.
     * @path /settings/{docId}
     */
    match /settings/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}