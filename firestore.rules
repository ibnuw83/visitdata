/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-specific data ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user themselves can read/write their profile.
 * - /destinations/{destinationId}: Stores destination information. Publicly readable, but only specific roles can modify.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable.
 * - /countries/{countryId}: Stores country information. Publicly readable.
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data for destinations. Only specific roles can modify.
 * - /unlock-requests/{requestId}: Stores unlock requests. Only specific roles can modify.
 * - /settings/app: Stores global app settings. Only specific roles can modify.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; only the authenticated user can access their own profile.
 * - Read-only collections (categories, countries) are publicly accessible for `get` and `list` operations.
 * - Write access to destinations, visit data, unlock requests, and app settings is restricted to 'admin' and 'pengelola' roles.
 * - The `id` field in `users` collection is enforced to match the `auth.uid` to maintain data consistency.
 *
 * Denormalization for Authorization:
 *   To simplify authorization, the user's role is stored directly in the user profile document. This avoids the need for complex lookups during rule evaluation.
 *   Destination IDs managed by a user are stored in the user profile. This enables quick validation of unlock requests based on user permissions.
 *
 * Structural Segregation:
 *   There is no need for structural segregation in this model as user-specific data and public data are stored in separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access control for user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching userId can create their profile.
     * @allow (get, update, delete) Authenticated user with matching userId can get, update, and delete their profile.
     * @deny (create) Any user attempting to create a profile with a userId that doesn't match their auth.uid.
     * @deny (get, list, create, update, delete) Unauthenticated requests.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access control for destination documents.
     * @path /destinations/{destinationId}
     * @allow (get, list) Anyone can read destinations.
     * @allow (create, update, delete) Only users with 'admin' or 'pengelola' role can create, update, or delete destinations.
     * @deny (create, update, delete) Unauthenticated requests.
     * @principle Restricts write access based on user role.
     */
    match /destinations/{destinationId} {
      allow get, list: if true;
      allow create: if isSignedIn() && (hasRole(['admin', 'pengelola']));
      allow update: if isSignedIn() && (hasRole(['admin', 'pengelola']));
      allow delete: if isSignedIn() && (hasRole(['admin', 'pengelola']));
    }

    /**
     * @description Manages access control for category documents.
     * @path /categories/{categoryId}
     * @allow (get, list) Anyone can read categories.
     * @deny (create, update, delete) No one can create, update, or delete categories via the client.
     * @principle Read-only collection.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access control for country documents.
     * @path /countries/{countryId}
     * @allow (get, list) Anyone can read countries.
     * @deny (create, update, delete) No one can create, update, or delete countries via the client.
     * @principle Read-only collection.
     */
    match /countries/{countryId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Manages access control for visit data documents.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list) Anyone can read visit data.
     * @allow (create, update, delete) Only users with 'admin' or 'pengelola' role can create, update, or delete visit data.
     * @deny (create, update, delete) Unauthenticated requests.
     * @principle Restricts write access based on user role.
     */
    match /destinations/{destinationId}/visits/{visitId} {
      allow get, list: if true;
      allow create: if isSignedIn() && (hasRole(['admin', 'pengelola']));
      allow update: if isSignedIn() && (hasRole(['admin', 'pengelola']) && resource != null);
      allow delete: if isSignedIn() && (hasRole(['admin', 'pengelola']) && resource != null);
    }

    /**
     * @description Manages access control for unlock request documents.
     * @path /unlock-requests/{requestId}
     * @allow (create) Authenticated users can create unlock requests.
     * @allow (get, list) Only 'admin' and 'pengelola' can read or list unlock requests.
     * @allow (update) Only 'admin' and 'pengelola' can update unlock requests.
     * @deny (update, delete) Unauthenticated users can't update or delete unlock requests.
     * @principle Restricts write access based on user role and data ownership.
     */
    match /unlock-requests/{requestId} {
      allow get, list: if isSignedIn() && hasRole(['admin', 'pengelola']);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && hasRole(['admin', 'pengelola']) && resource != null;
      allow delete: if false;
    }

    /**
     * @description Manages access control for app settings document.
     * @path /settings/app
     * @allow (get) Anyone can read app settings.
     * @allow (update) Only users with 'admin' role can update app settings.
     * @deny (create, delete) No one can create or delete app settings via the client.
     * @principle Restricts write access based on user role.
     */
    match /settings/app {
      allow get: if true;
      allow update: if isSignedIn() && hasRole(['admin']) && resource != null;
      allow create, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function hasRole(roles) {
      return isSignedIn() && roles.hasAny(request.auth.token.role);
    }

  }
}