/**
 * @file Firebase Security Rules for the application.
 *
 * @core_philosophy This ruleset employs a hybrid security model:
 *   - User profiles are public read, private write (owner-only).
 *   - Destinations and categories are public read, admin-only write.
 *   - Visit data is public read, role-based write (pengelola can only edit destination they're assigned to)
 *   - Unlock Requests: pengelola can create, admin can approve, reject, or process.
 *   - App settings: admin-only read/write.
 * @data_structure
 *   - /users/{userId}: User profile data, publicly readable, owner-writable.
 *   - /destinations/{destinationId}: Destination data, publicly readable, admin-only writable.
 *   - /categories/{categoryId}: Category data, publicly readable, admin-only writable.
 *   - /countries/{countryId}: Country data, publicly readable, admin-only writable.
 *   - /destinations/{destinationId}/visits/{visitId}: Visit data for destinations.
 *   - /unlock-requests/{requestId}: Requests to unlock visit data for editing.
 *   - /settings/app: Global application settings.
 * @key_security_decisions
 *   - User listing is disallowed.
 *   - User roles are managed server-side and determine write access to destinations, categories, and countries.
 *   - Role-based authorization is used for `visitData` and `unlockRequests`.
 *   - Data for destination access for pengelola is denormalized to make security checks efficient.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
        return isSignedIn() && (getUserRole() == 'admin');
    }

    function isPengelola() {
        return isSignedIn() && (getUserRole() == 'pengelola');
    }

    function getUserRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function getAssignedDestinationIds() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations;
    }

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     *   - Auth: { uid: 'user123' }
     *   - Data: { uid: 'user123', name: 'John Doe', email: 'john@example.com' }
     * @deny (create) User with ID 'user123' tries to create profile for 'user456'.
     *   - Auth: { uid: 'user123' }
     *   - Data: { uid: 'user456', name: 'John Doe', email: 'john@example.com' }
     * @principle Enforces user-ownership: users can only read and modify their own profile.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description Controls access to destination data.
     * @path /destinations/{destinationId}
     * @allow (get, list) Any user can read destination data.
     * @allow (create) Admin user creates a new destination.
     *   - Auth: { uid: 'admin123' }
     *   - Data: { id: 'dest123', name: 'Beach', category: 'Leisure', location: 'Bali', status: 'active', imageUrl: 'http://example.com/image.jpg' }
     * @deny (create) Non-admin user attempts to create a new destination.
     *   - Auth: { uid: 'user123' }
     *   - Data: { id: 'dest123', name: 'Beach', category: 'Leisure', location: 'Bali', status: 'active', imageUrl: 'http://example.com/image.jpg' }
     * @principle Public read, admin-only write access for destinations.
     */
    match /destinations/{destinationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to categories data.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @allow (create) Admin user creates a new category.
     *   - Auth: { uid: 'admin123' }
     *   - Data: { id: 'cat123', name: 'Beach' }
     * @deny (create) Non-admin user attempts to create a new category.
     *   - Auth: { uid: 'user123' }
     *   - Data: { id: 'cat123', name: 'Beach' }
     * @principle Public read, admin-only write access for categories.
     */
    match /categories/{categoryId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

       /**
     * @description Controls access to countries data.
     * @path /countries/{countryId}
     * @allow (get, list) Any user can read country data.
     * @allow (create) Admin user creates a new country.
     *   - Auth: { uid: 'admin123' }
     *   - Data: { code: 'ID', name: 'Indonesia' }
     * @deny (create) Non-admin user attempts to create a new country.
     *   - Auth: { uid: 'user123' }
     *   - Data: { code: 'ID', name: 'Indonesia' }
     * @principle Public read, admin-only write access for countries.
     */
    match /countries/{countryId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to visit data for destinations.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list) Any user can read visit data.
     * @allow (create, update) Pengelola can create/update visit data for destinations they manage.
     *   - Auth: { uid: 'pengelola123' }
     *   - Data: { destinationId: 'dest123', year: 2024, month: 1, wisnus: 100, wisman: 50, totalVisitors: 150 }
     * @deny (create, update) Pengelola attempts to modify visit data for a destination they do not manage.
     *   - Auth: { uid: 'pengelola123' }
     *   - Data: { destinationId: 'dest456', year: 2024, month: 1, wisnus: 100, wisman: 50, totalVisitors: 150 }
     * @deny (create, update) Non-pengelola attempts to modify visit data.
     *   - Auth: { uid: 'user123' }
     *   - Data: { destinationId: 'dest123', year: 2024, month: 1, wisnus: 100, wisman: 50, totalVisitors: 150 }
     * @principle Public read, role-based write access for visit data.
     */
    match /destinations/{destinationId}/visits/{visitId} {
        allow get: if true;
        allow list: if true;
        allow create: if isPengelola() && (destinationId in getAssignedDestinationIds());
        allow update: if isPengelola() && (destinationId in getAssignedDestinationIds());
        allow delete: if false;
    }

    /**
     * @description Controls access to unlock requests.
     * @path /unlock-requests/{requestId}
     * @allow (create) Pengelola can create unlock requests.
     *   - Auth: { uid: 'pengelola123' }
     *   - Data: { destinationId: 'dest123', month: 1, year: 2024, reason: 'Need to correct data' }
     * @allow (update) Admin can approve, reject, or process unlock requests.
     *   - Auth: { uid: 'admin123' }
     *   - Data: { destinationId: 'dest123', month: 1, year: 2024, reason: 'Need to correct data', status: 'approved' }
     * @deny (update) Pengelola attempts to modify unlock requests.
     *   - Auth: { uid: 'pengelola123' }
     *   - Data: { destinationId: 'dest123', month: 1, year: 2024, reason: 'Need to correct data', status: 'approved' }
     * @principle Role-based access for managing unlock requests.
     */
    match /unlock-requests/{requestId} {
        allow get: if false;
        allow list: if false;
        allow create: if isPengelola();
        allow update: if isAdmin();
        allow delete: if false;
    }

    /**
     * @description Controls access to global app settings.
     * @path /settings/app
     * @allow (get) Any user can read app settings.
     * @allow (update) Admin user updates app settings.
     *   - Auth: { uid: 'admin123' }
     *   - Data: { appTitle: 'My App', logoUrl: 'http://example.com/logo.png' }
     * @deny (update) Non-admin user attempts to update app settings.
     *   - Auth: { uid: 'user123' }
     *   - Data: { appTitle: 'My App', logoUrl: 'http://example.com/logo.png' }
     * @principle Admin-only access for modifying application settings.
     */
    match /settings/app {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if isAdmin();
        allow delete: if false;
    }
  }
}