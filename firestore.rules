/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with owner-only access for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Access is restricted to the owner.
 * - /destinations/{destinationId}: Stores tourist destination information. Publicly readable, writeable only by pengelola or admin.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable, writeable only by admin.
 * - /countries/{countryId}: Stores countries for visitor data. Publicly readable, writeable only by admin.
 * - /destinations/{destinationId}/visits/{visitId}: Stores monthly visit data. Accessible only by pengelola assigned to the destination or admin.
 * - /unlock-requests/{requestId}: Stores unlock requests. Accessible by the requester and admin.
 * - /settings/app: Stores global application settings. Only accessible by admin.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for destinations, categories and countries.
 * - Strict ownership is enforced for user profiles.
 * - Role-based access control is used for destinations, categories, countries, visit data, unlock requests and app settings.
 *
 * Denormalization for Authorization:
 * - The `VisitData` entity has a `destinationId` field, which is used to check if a user is assigned to the destination.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User A creates their own profile (auth.uid == userId).
     * @allow (get, update, delete) User A reads/modifies their own profile (auth.uid == userId).
     * @deny (create) User A tries to create profile for User B (auth.uid != userId).
     * @deny (get, update, delete) User A tries to read/modify User B's profile (auth.uid != userId).
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to destinations, while restricting writes to pengelola or admin.
     * @path /destinations/{destinationId}
     * @allow (get, list) Anyone can read the destination.
     * @allow (create, update, delete) User with role pengelola or admin can modify destinations.
     * @deny (create, update, delete) User without role pengelola or admin cannot modify destinations.
     * @principle Allows public read access with role-based access control for writes.
     */
    match /destinations/{destinationId} {
      allow get, list: if true;

      function isAdminOrPengelola() {
        return request.auth.token.role == 'admin' || request.auth.token.role == 'pengelola';
      }

      allow create: if isAdminOrPengelola();
      allow update: if isAdminOrPengelola() && resource != null;
      allow delete: if isAdminOrPengelola() && resource != null;
    }

    /**
     * @description Allows public read access to categories, while restricting writes to admin.
     * @path /categories/{categoryId}
     * @allow (get, list) Anyone can read the category.
     * @allow (create, update, delete) User with role admin can modify categories.
     * @deny (create, update, delete) User without role admin cannot modify categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to countries, while restricting writes to admin.
     * @path /countries/{countryId}
     * @allow (get, list) Anyone can read the country.
     * @allow (create, update, delete) User with role admin can modify countries.
     * @deny (create, update, delete) User without role admin cannot modify countries.
     */
    match /countries/{countryId} {
      allow get, list: if true;

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts access to monthly visit data to pengelola assigned to the destination or admin.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list) User with role pengelola assigned to the destination or admin can read visit data.
     * @allow (create, update, delete) User with role pengelola assigned to the destination or admin can modify visit data.
     * @deny (get, list, create, update, delete) User without role pengelola assigned to the destination or admin cannot access visit data.
     * @principle Enforces role-based access control for writes.
     */
    match /destinations/{destinationId}/visits/{visitId} {

      function isPengelolaAssignedToDestination(destinationId) {
        return request.auth != null && (request.auth.token.role == 'admin' || (request.auth.token.role == 'pengelola' && request.auth.token.assignedLocations.hasAny([destinationId])));
      }

      allow get, list: if isPengelolaAssignedToDestination(destinationId);
      allow create: if isPengelolaAssignedToDestination(destinationId);
      allow update: if isPengelolaAssignedToDestination(destinationId) && resource != null;
      allow delete: if isPengelolaAssignedToDestination(destinationId) && resource != null;
    }

    /**
     * @description Restricts access to unlock requests to the requester and admin.
     * @path /unlock-requests/{requestId}
     * @allow (get) User who requested the unlock or admin can read the request.
     * @allow (list) No listing allowed.
     * @allow (create) Any authenticated user can create a unlock request.
     * @allow (update, delete) Admin can update/delete unlock requests.
     * @deny (get, create, update, delete) Other users cannot access unlock requests.
     */
    match /unlock-requests/{requestId} {
      function isRequester(requestedBy) {
        return request.auth != null && request.auth.uid == requestedBy;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isRequester(resource.data.requestedBy) || isAdmin();
      allow list: if false;
      allow create: if request.auth != null;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts access to app settings to admin only.
     * @path /settings/app
     * @allow (get) Anyone can read the settings.
     * @allow (create, update, delete) User with role admin can modify settings.
     * @deny (create, update, delete) User without role admin cannot modify settings.
     */
    match /settings/app {
      allow get: if true;

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}