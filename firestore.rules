/**
 * @fileoverview Firestore Security Rules for the Tour Management Application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing public read access for some data with strict ownership and role-based access control for sensitive operations.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information, accessible only to the owning user and admins.
 * - `/destinations/{destinationId}`: Stores information about tourist destinations. Public read access is allowed, but modifications are restricted to admins and assigned managers.
 * - `/categories/{categoryId}`: Stores destination categories. Public read access is allowed, but modifications are denied.
 * - `/countries/{countryId}`: Stores country information. Public read access is allowed, but modifications are denied.
 * - `/destinations/{destinationId}/visits/{visitId}`: Stores monthly visit data for each destination. Write access is restricted to admins and assigned managers.
 * - `/unlock-requests/{requestId}`: Stores requests to unlock visit data. Only admins and the request originator can read unlock requests. Only admins can create or update them.
 * - `/settings/app`: Stores global application settings. Only admins can modify these settings.
 *
 * Key Security Decisions:
 * - User listing is denied to prevent unauthorized data harvesting.
 * - Public read access is granted for destinations, categories, and countries to facilitate open data consumption.
 * - Strict role-based access control is enforced for all write operations, leveraging the 'role' field in user profiles.
 * - Data consistency is enforced for user-scoped data, ensuring that the `userId` in the path matches the `uid` in the document.
 *
 * Denormalization for Authorization:
 * - User profiles store an array of `assignedLocations` to simplify authorization checks for destination-related operations.
 *
 * Structural Segregation:
 * - Public data (destinations, categories, countries) is stored in top-level collections, while private user data is stored under `/users/{userId}`, ensuring clear separation of concerns and efficient query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owning user can read/write their profile. Admins can read all profiles.
     * @path /users/{userId}
     * @allow (get, update, delete): Authenticated user accessing their own profile.
     * @allow (create): Authenticated user creating their own profile, where userId matches auth.uid.
     * @allow (list): Never. User listing is not permitted.
     * @deny (get, update, delete): Authenticated user attempting to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Secure tourist destinations. Public read access, but writes are restricted to admins and assigned managers.
     * @path /destinations/{destinationId}
     * @allow (get, list): Anyone can read destination data.
     * @allow (create, update, delete): Only admins or assigned managers can modify destination data.
     * @deny (create, update, delete): Non-admins attempting to modify destination data they don't manage.
     * @principle Allows public read access while enforcing role-based access control for writes.
     */
    match /destinations/{destinationId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        function isManagerOfDestination(destinationId) {
            return isSignedIn() && (isAdmin() || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations.hasAny([destinationId])));
        }

        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isManagerOfDestination(destinationId) && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Secure destination categories. Public read access, no writes allowed.
      * @path /categories/{categoryId}
      * @allow (get, list): Anyone can read category data.
      * @deny (create, update, delete): No one can modify category data.
      * @principle Provides public read access while preventing unauthorized modifications.
      */
    match /categories/{categoryId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

     /**
      * @description Secure countries data. Public read access, no writes allowed.
      * @path /countries/{countryId}
      * @allow (get, list): Anyone can read country data.
      * @deny (create, update, delete): No one can modify country data.
      * @principle Provides public read access while preventing unauthorized modifications.
      */
    match /countries/{countryId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Secure monthly visit data for destinations. Only admins and assigned managers can modify visit data.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list): Anyone can read visit data.
     * @allow (create, update, delete): Only admins or assigned managers of the destination can modify visit data.
     * @deny (create, update, delete): Non-admins attempting to modify visit data for destinations they don't manage.
     * @principle Enforces role-based access control for destination visit data.
     */
    match /destinations/{destinationId}/visits/{visitId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        function isManagerOfDestination(destinationId) {
            return isSignedIn() && (isAdmin() || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations.hasAny([destinationId])));
        }

        allow get: if true;
        allow list: if true;
        allow create: if isManagerOfDestination(destinationId);
        allow update: if isManagerOfDestination(destinationId) && resource != null;
        allow delete: if isManagerOfDestination(destinationId) && resource != null;
    }

    /**
     * @description Secure unlock requests. Only admins and the request originator can read unlock requests. Only admins can create or update them.
     * @path /unlock-requests/{requestId}
     * @allow (get): Admin or the user who requested the unlock.
     * @allow (create, update): Only admins can create or update unlock requests.
     * @deny (get): Non-admins attempting to access unlock requests they didn't create.
     * @principle Enforces role-based access control for unlock requests.
     */
    match /unlock-requests/{requestId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        function isRequestor(requestedBy) {
            return isSignedIn() && request.auth.uid == requestedBy;
        }

        allow get: if isAdmin() || isRequestor(resource.data.requestedBy);
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if false;
    }

    /**
     * @description Secure application settings. Only admins can modify these settings.
     * @path /settings/app
     * @allow (get, list): Anyone can read application settings.
     * @allow (update): Only admins can update application settings.
     * @deny (create, delete): No one can create or delete the app settings document.
     * @principle Enforces role-based access control for global application settings.
     */
    match /settings/app {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if isAdmin() && resource != null;
        allow delete: if false;
    }
  }
}