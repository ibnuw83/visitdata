/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with an admin override.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only to the user themselves and admins.
 * - /destinations/{destinationId}: Stores information about tourist destinations. Publicly readable, but only admins can modify.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable, but only admins can modify.
 * - /countries/{countryId}: Stores country information. Publicly readable, but only admins can modify.
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data for each destination. Publicly readable, but only admins can modify.
 * - /unlock-requests/{requestId}: Stores requests to unlock data entry. Only admins can modify.
 * - /settings/app: Stores global application settings. Publicly readable, but only admins can modify.
 *
 * Key Security Decisions:
 * - Admins have full access to all data.
 * - Users can only read and modify their own profile data.
 * - Listing of users is disallowed for privacy.
 * - Public read access is granted to destinations, categories, countries, visit data, and app settings to allow for a read-heavy application.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the /users/{userId} document to simplify role-based checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user is the owner of the document.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Stores public profiles for all users.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile.
     * @allow (get) User with UID 'user123' reads their own profile.
     * @allow (update) Admin updates a user's profile.
     * @deny (create) User with UID 'user123' tries to create a profile with a different ID.
     * @deny (update) User with UID 'user123' tries to update another user's profile.
     * @deny (delete) Non-admin attempts to delete a user profile
     * @principle Enforces document ownership for writes and admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Prevent listing of all users

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores information about each tourist destination.
     * @path /destinations/{destinationId}
     * @allow (get) Any user can read a destination.
     * @allow (list) Any user can list destinations.
     * @allow (create) Admin creates a new destination.
     * @deny (create) Non-admin attempts to create a destination.
     * @deny (update) Non-admin attempts to update a destination.
     * @deny (delete) Non-admin attempts to delete a destination.
     * @principle Allows public read access with admin-only writes.
     */
    match /destinations/{destinationId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores all available destination categories.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read a category.
     * @allow (list) Any user can list categories.
     * @allow (create) Admin creates a new category.
     * @deny (create) Non-admin attempts to create a category.
     * @deny (update) Non-admin attempts to update a category.
     * @deny (delete) Non-admin attempts to delete a category.
     * @principle Allows public read access with admin-only writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores all available countries for wisman data.
     * @path /countries/{countryId}
     * @allow (get) Any user can read a country.
     * @allow (list) Any user can list countries.
     * @allow (create) Admin creates a new country.
     * @deny (create) Non-admin attempts to create a country.
     * @deny (update) Non-admin attempts to update a country.
     * @deny (delete) Non-admin attempts to delete a country.
     * @principle Allows public read access with admin-only writes.
     */
    match /countries/{countryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores monthly visit data for each destination. visitId is in the format YYYY-MM.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get) Any user can read visit data.
     * @allow (list) Any user can list visit data for a destination.
     * @allow (create) Admin creates new visit data.
     * @deny (create) Non-admin attempts to create visit data.
     * @deny (update) Non-admin attempts to update visit data.
     * @deny (delete) Non-admin attempts to delete visit data.
     * @principle Allows public read access with admin-only writes.
     */
    match /destinations/{destinationId}/visits/{visitId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores all unlock requests from managers.
     * @path /unlock-requests/{requestId}
     * @allow (get) Admin can get an unlock request.
     * @allow (list) Admin can list unlock requests.
     * @allow (create) Any signed-in user can create an unlock request.
     * @deny (create) Non-signed-in user attempts to create an unlock request.
     * @allow (update) Admin can update an unlock request.
     * @deny (update) Non-admin attempts to update an unlock request.
     * @deny (delete) Non-admin attempts to delete an unlock request.
     * @principle Restricts access to unlock requests.
     */
    match /unlock-requests/{requestId} {
      allow get, list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores global application settings.
     * @path /settings/app
     * @allow (get) Any user can read the app settings.
     * @allow (list) Any user can list app settings.
     * @allow (create) Admin creates app settings.
     * @deny (create) Non-admin attempts to create app settings.
     * @deny (update) Non-admin attempts to update app settings.
     * @deny (delete) Non-admin attempts to delete app settings.
     * @principle Allows public read access with admin-only writes.
     */
    match /settings/app {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}