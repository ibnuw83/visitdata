/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership checks for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owner (the user themselves) and admins.
 * - /destinations/{destinationId}: Stores destination information. Publicly readable, but write access is restricted.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable, but write access is restricted.
 * - /countries/{countryId}: Stores countries. Publicly readable, but write access is restricted.
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data for destinations. Access controlled by destination managers and admins.
 * - /unlock-requests/{requestId}: Stores requests to unlock visit data.  Access controlled to the requestor and admins.
 * - /settings/app: Stores application settings.  Write access restricted to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy reasons.
 * - Destinations, categories, and countries are publicly readable.
 * - Write access to destinations, categories, and countries is restricted.
 * - Visit data access is restricted to managers of the associated destination and admins.
 * - Unlock requests can be created by anyone, but only processed by authorized users.
 *
 * Denormalization for Authorization:
 * - VisitData documents do not contain redundant information. Access control is enforced via the user's `assignedLocations` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create a profile with a different user ID.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to destination documents.
     * @path /destinations/{destinationId}
     * @allow (get) Any user can read destination information.
     * @deny (create) No user can create destination documents.
     * @deny (update) No user can update destination documents.
     * @deny (delete) No user can delete destination documents.
     * @principle Public read, restricted writes.
     */
    match /destinations/{destinationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to category documents.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read category information.
     * @deny (create) No user can create category documents.
     * @deny (update) No user can update category documents.
     * @deny (delete) No user can delete category documents.
     * @principle Public read, restricted writes.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to country documents.
     * @path /countries/{countryId}
     * @allow (get) Any user can read country information.
     * @deny (create) No user can create country documents.
     * @deny (update) No user can update country documents.
     * @deny (delete) No user can delete country documents.
     * @principle Public read, restricted writes.
     */
    match /countries/{countryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to visit data documents.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get) Managers of the destination can read visit data.
     * @allow (create) Managers of the destination can create visit data.
     * @allow (update) Managers of the destination can update visit data.
     * @allow (delete) Managers of the destination can delete visit data.
     * @deny (get) Users who are not managers of the destination cannot read visit data.
     * @deny (create) Users who are not managers of the destination cannot create visit data.
     * @deny (update) Users who are not managers of the destination cannot update visit data.
     * @deny (delete) Users who are not managers of the destination cannot delete visit data.
     * @principle Restricts access to managers of the destination.
     */
    match /destinations/{destinationId}/visits/{visitId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isDestinationManager(destinationId) {
          return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations.hasAny([destinationId]);
      }

      allow get: if isDestinationManager(destinationId);
      allow list: if isDestinationManager(destinationId);
      allow create: if isDestinationManager(destinationId);
      allow update: if isDestinationManager(destinationId) && resource != null;
      allow delete: if isDestinationManager(destinationId) && resource != null;
    }

    /**
     * @description Controls access to unlock request documents.
     * @path /unlock-requests/{requestId}
     * @allow (create) Authenticated user can create unlock request.
     * @deny (update) Only the assigned user can update the unlock request.
     *
     * @principle Restricts write access to the assigned user.
     */
    match /unlock-requests/{requestId} {
        function isSignedIn() {
            return request.auth != null;
        }
        
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.requestedBy == request.auth.uid;
        allow update: if isSignedIn() && resource != null;
        allow delete: if false;
    }

    /**
     * @description Controls access to app settings document.
     * @path /settings/app
     * @deny (create) No user can create app settings.
     * @deny (update) No user can update app settings.
     * @deny (delete) No user can delete app settings.
     */
    match /settings/app {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}