/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allows public read access to destinations, categories, countries, and app settings,
 * and restricts write access based on user roles and ownership. It uses
 * denormalization to avoid costly `get()` operations in the rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owner.
 * - /destinations/{destinationId}: Stores destination information. Publicly readable,
 *   but writes are restricted.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable, writes restricted.
 * - /countries/{countryId}: Stores country information. Publicly readable, writes restricted.
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data for destinations.  Writes are restricted.
 * - /unlock-requests/{requestId}: Stores unlock requests. Writes are restricted.
 * - /settings/app: Stores global app settings. Publicly readable, writes restricted.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by not granting `list` permission on `/users`.
 * - Public read access is granted to destinations, categories, countries, and app settings.
 * - Write permissions on destinations, categories, countries, app settings, visit data, and unlock requests are limited to authenticated users and require more specific logic.
 * - The `visitId` in `/destinations/{destinationId}/visits/{visitId}` is assumed to be a string (e.g., "2024-01").
 * - No data validation is performed beyond authorization checks to facilitate prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile if request.auth.uid == 'abc'.
     * @allow (get, update, delete) - User 'abc' can get, update, and delete their profile.
     * @deny (create) - User 'def' cannot create a profile with ID 'abc'.
     * @deny (update, delete) - User 'def' cannot update or delete user 'abc' profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to destination data, but restricts writes.
     * @path /destinations/{destinationId}
     * @allow (get, list) - Any user can read destination data.
     * @deny (create, update, delete) - No one can modify destination data without authentication
     * @principle Allows public read access while restricting writes.
     */
    match /destinations/{destinationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && false; // TODO: Add appropriate role/permission
      allow delete: if isSignedIn() && false; // TODO: Add appropriate role/permission

        /**
         * @description Allows authenticated users to create visits data for destinations.
         * @path /destinations/{destinationId}/visits/{visitId}
         * @allow (get, list) - Any user can read visit data.
         * @deny (create, update, delete) - No one can modify visit data without authentication
         * @principle Allows public read access while restricting writes.
         */
        match /visits/{visitId} {
          allow get, list: if true;
          allow create: if isSignedIn();
          allow update: if isSignedIn() && false; // TODO: Add appropriate role/permission
          allow delete: if isSignedIn() && false; // TODO: Add appropriate role/permission
        }
    }

    /**
     * @description Allows public read access to category data, but restricts writes.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read category data.
     * @deny (create, update, delete) - No one can modify category data without authentication.
     * @principle Allows public read access while restricting writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && false; // TODO: Add appropriate role/permission
      allow delete: if isSignedIn() && false; // TODO: Add appropriate role/permission
    }

    /**
     * @description Allows public read access to country data, but restricts writes.
     * @path /countries/{countryId}
     * @allow (get, list) - Any user can read country data.
     * @deny (create, update, delete) - No one can modify country data without authentication.
     * @principle Allows public read access while restricting writes.
     */
    match /countries/{countryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && false; // TODO: Add appropriate role/permission
      allow delete: if isSignedIn() && false; // TODO: Add appropriate role/permission
    }

    /**
     * @description Controls access to unlock requests.
     * @path /unlock-requests/{requestId}
     * @deny (get, list, create, update, delete) - No one can modify unlock requests without authentication.
     */
    match /unlock-requests/{requestId} {
      allow get, list: if false; // Explicitly disallow list for security.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && false; // TODO: Add appropriate role/permission
      allow delete: if isSignedIn() && false; // TODO: Add appropriate role/permission
    }

    /**
     * @description Allows public read access to app settings, but restricts writes.
     * @path /settings/app
     * @allow (get) - Any user can read app settings.
     * @deny (create, update, delete) - No one can modify app settings without authentication.
     * @principle Allows public read access while restricting writes.
     */
    match /settings/app {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && false; // TODO: Add appropriate role/permission
      allow delete: if isSignedIn() && false; // TODO: Add appropriate role/permission
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the requesting user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the requesting user is the existing owner of the document.
  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}