/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with owner-only restrictions where applicable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves and admins.
 * - /destinations/{destinationId}: Stores destination data, publicly readable, but only editable by admins or users assigned to the destination.
 * - /categories/{categoryId}: Stores destination categories, publicly readable, but only editable by admins.
 * - /countries/{countryId}: Stores countries data, publicly readable, but only editable by admins.
 * - /destinations/{destinationId}/visits/{visitId}: Stores monthly visit data, editable by admins or assigned users, locked by default.
 * - /unlock-requests/{requestId}: Stores requests to unlock data entry, managed by admins.
 * - /settings/app: Stores global app settings, only editable by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only collections like 'categories' and 'countries' are publicly readable.
 * - The default security posture for ambiguous relationships is strict owner-only access or admin-only.
 * - Role-based access control is implemented using the 'role' field in the user profile.
 * - Destinations have an assignedLocations field in the UserProfile to assign destinations to a user.
 *
 * Denormalization for Authorization:
 * - The UserProfile includes an 'assignedLocations' array to simplify destination access checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list): Authenticated user can read their own profile.
     * @allow (create): Authenticated user can create their own profile.
     * @allow (update, delete): Authenticated user can update/delete their own profile or if they have "admin" role.
     * @deny (get, list): Non-authenticated user.
     * @deny (create): Authenticated user attempts to create a profile with a mismatched user ID.
     * @deny (update, delete): Non-authenticated user.
     * @principle Enforces user ownership and admin override for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Controls access to destination documents.
     * @path /destinations/{destinationId}
     * @allow (get, list): Anyone can read destination data.
     * @allow (create): Only admins can create destinations.
     * @allow (update, delete): Only admins or assigned users can update/delete destinations.
     * @deny (create, update, delete): Non-admins and non-assigned users.
     * @principle Public read access with restricted write access based on role and assigned locations.
     */
    match /destinations/{destinationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      function isDestinationManager() {
        return isSignedIn() && (isAdmin() || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations).hasAny([destinationId]));
      }
      function isExistingDestinationManager() {
        return isDestinationManager() && resource != null;
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isExistingDestinationManager();
      allow delete: if isExistingDestinationManager();
    }

    /**
     * @description Controls access to category documents.
     * @path /categories/{categoryId}
     * @allow (get, list): Anyone can read category data.
     * @allow (create, update, delete): Only admins can create, update, or delete categories.
     * @deny (create, update, delete): Non-admins.
     * @principle Public read access with admin-only write access for categories.
     */
    match /categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to country documents.
     * @path /countries/{countryId}
     * @allow (get, list): Anyone can read countries data.
     * @allow (create, update, delete): Only admins can create, update, or delete countries.
     * @deny (create, update, delete): Non-admins.
     * @principle Public read access with admin-only write access for countries.
     */
    match /countries/{countryId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to visit data documents.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list): Only admins and assigned users can read visit data.
     * @allow (create, update, delete): Only admins or assigned users can create, update, or delete visit data.
     * @deny (create, update, delete): Non-admins and non-assigned users.
     * @principle Restricted access based on role and assigned locations.
     */
    match /destinations/{destinationId}/visits/{visitId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        function isDestinationManager(destinationId) {
            return isSignedIn() && (isAdmin() || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations).hasAny([destinationId]));
        }
        function isExistingDestinationManager(destinationId) {
            return isDestinationManager(destinationId) && resource != null;
        }

        allow get, list: if isDestinationManager(destinationId);
        allow create: if isDestinationManager(destinationId);
        allow update: if isExistingDestinationManager(destinationId);
        allow delete: if isExistingDestinationManager(destinationId);
    }

    /**
     * @description Controls access to unlock request documents.
     * @path /unlock-requests/{requestId}
     * @allow (get, list): Only admins can read unlock requests.
     * @allow (create): Any signed-in user can create an unlock request.
     * @allow (update, delete): Only admins can update or delete unlock requests.
     * @deny (get, list, update, delete): Non-admins.
     * @principle Admin-only access for management of unlock requests, user creation allowed.
     */
    match /unlock-requests/{requestId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        allow get, list: if isAdmin();
        allow create: if isSignedIn();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to app settings document.
     * @path /settings/app
     * @allow (get): Anyone can read app settings.
     * @allow (update): Only admins can update app settings.
     * @deny (update): Non-admins.
     * @principle Public read access with admin-only write access for app settings.
     */
    match /settings/app {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        allow get: if true;
        allow create: if false;
        allow list: if false;
        allow update: if isAdmin() && resource != null;
        allow delete: if false;
    }
  }
}