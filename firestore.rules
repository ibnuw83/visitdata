/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with owner-only access for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Accessible only to the owner (self-creation allowed).
 * - /destinations/{destinationId}: Stores destination information. Publicly readable, but writes are restricted.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable, but writes are restricted.
 * - /countries/{countryId}: Stores country information. Publicly readable, but writes are restricted.
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data for destinations.  Write access is managed by "pengelola" users who have been assigned a specific location
 * - /unlock-requests/{requestId}: Stores unlock requests for visit data. Write access restricted to the requestor and approver.
 * - /settings/app: Stores global app settings. Writes are restricted.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Listing users is disallowed.
 * - Destinations, categories, countries, and app settings are publicly readable.
 * - Visit data is publicly readable, but writes are restricted to assigned "pengelola" users and admins.
 *
 * Denormalization for Authorization:
 * - `VisitData` documents do not contain redundant user role information. To simplify rules, role information is determined using the user's profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get) User with matching UID can read their profile.
     * @allow (update) User with matching UID can update their profile.
     * @allow (delete) User with matching UID can delete their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get) User cannot read another user's profile.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to destination documents.
     * @path /destinations/{destinationId}
     * @allow (get, list) Any user can read destination documents.
     * @deny (create, update, delete) Only authorized users can create, update, or delete destination documents.
     * @principle Allows public read access but restricts writes.
     */
    match /destinations/{destinationId} {
      allow get, list: if true;
      allow create: if isAdmin() ;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to category documents.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category documents.
     * @deny (create, update, delete) Only authorized users can create, update, or delete category documents.
     * @principle Allows public read access but restricts writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to country documents.
     * @path /countries/{countryId}
     * @allow (get, list) Any user can read country documents.
     * @deny (create, update, delete) Only authorized users can create, update, or delete country documents.
     * @principle Allows public read access but restricts writes.
     */
    match /countries/{countryId} {
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

     /**
      * @description Controls access to visit data documents.
      * @path /destinations/{destinationId}/visits/{visitId}
      * @allow (get, list) Any user can read visit data documents.
      * @allow (create, update) Only assigned "pengelola" or admin users can create or update visit data documents for their assigned destinations.
      * @allow (delete) Only admin users can delete visit data documents.
      * @deny (create, update) "pengelola" user cannot create or update visit data documents for destinations not assigned to them.
      * @principle Allows public read access but restricts writes to assigned "pengelola" users or admins.
      */
    match /destinations/{destinationId}/visits/{visitId} {
        allow get, list: if true;
        allow create: if isPengelolaOfDestination(destinationId) || isAdmin();
        allow update: if isPengelolaOfDestination(destinationId) || isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to unlock request documents.
     * @path /unlock-requests/{requestId}
     * @allow (create) Any signed-in user can create an unlock request.
     * @allow (get) Only the user who created the request or an admin can read the request.
     * @allow (update) Only an admin can update the status of the request.
     * @deny (delete) No one can delete an unlock request.
     * @principle Restricts access to unlock requests to the requestor and admins.
     */
    match /unlock-requests/{requestId} {
        allow get: if request.auth.uid == resource.data.requestedBy || isAdmin();
        allow list: if isAdmin();
        allow create: if isSignedIn() && request.resource.data.requestedBy == request.auth.uid;
        allow update: if isAdmin();
        allow delete: if false;
    }

    /**
     * @description Controls access to app settings document.
     * @path /settings/app
     * @allow (get) Any user can read the app settings.
     * @deny (create, update, delete) Only authorized users can create, update, or delete the app settings.
     * @principle Allows public read access but restricts writes.
     */
    match /settings/app {
        allow get: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isPengelola() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola';
    }

    function isPengelolaOfDestination(destinationId) {
        return isPengelola() && destinationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations;
    }
  }
}