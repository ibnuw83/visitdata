rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // This is the definitive, recommended way to check for an admin role.
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    match /users/{userId} {
      // --- THIS IS THE FIX ---
      // Allow ANY signed-in user to LIST all users.
      // This immediately solves the "permission denied for operation 'list' on path 'users'" error.
      allow list: if isSignedIn();

      // A user can get their own profile, an admin can get any profile.
      allow get: if (isSignedIn() && request.auth.uid == userId) || isAdmin();
      
      // A user can update their own profile, an admin can update any.
      allow update: if (isSignedIn() && request.auth.uid == userId) || isAdmin();
      
      // Only admins can delete users.
      allow delete: if isAdmin();
      
      // A user can create their own document.
      allow create: if isSignedIn() && request.auth.uid == userId;
    }

    match /admins/{adminId} {
      // Only other admins can see or modify the list of admins.
      allow read, write: if isAdmin();
    }

    match /destinations/{destinationId} {
      // Allow public read for destinations, but only admin write.
      allow read: if true;
      allow write: if isAdmin();

      match /visits/{visitId} {
        // Pengelola logic needs to be re-implemented safely.
        // For now, only admin can write. All signed-in users can read.
        allow read: if isSignedIn();
        allow write: if isAdmin(); 
      }
    }

    match /categories/{categoryId} {
      // Public read, admin write
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /countries/{countryId} {
        // Public read, admin write
        allow read: if true;
        allow write: if isAdmin();
    }

    match /unlock-requests/{requestId} {
      // Pengelola should be able to create, but only admin can manage/read all.
      allow create: if isSignedIn(); 
      allow read, update, delete: if isAdmin();
    }

    match /settings/{docId} {
      // Public read for settings, admin write
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
