/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with owner-only restrictions in some areas,
 *  and public read access for certain collections like destinations and categories.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information, accessible only to the user themselves.
 * - `/destinations/{destinationId}`: Stores destination information, publicly readable but writable only by authorized users.
 * - `/categories/{categoryId}`: Stores category information, publicly readable, but writable only by authorized users.
 * - `/countries/{countryId}`: Stores country information, publicly readable, but writable only by authorized users.
 * - `/destinations/{destinationId}/visits/{visitId}`: Stores visit data for destinations, writable only by authorized users for specific destinations they manage.
 * - `/unlock-requests/{requestId}`: Stores unlock requests, writable only by authorized users.
 * - `/settings/app`: Stores application settings, writable only by authorized users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for `/destinations`, `/categories`, and `/countries`.
 * - The `isOwner(userId)` function is used to grant access to a user's own data.
 * - Write access to destination visit data is restricted based on destination management.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly within the user profile document for faster rule evaluation.
 * - Destination IDs managed by users are stored in the user profile for efficient visit data access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      // Only signed-in users can access user profiles.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed

      // Users can only create their own profile
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;

      // Users can only update and delete their own profile.
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to tourist destination documents.
     * @path /destinations/{destinationId}
     * @allow (get, list) Any user can read destination information.
     * @allow (create) User with 'admin' or 'pengelola' role can create destination documents.
     * @deny (create) User without 'admin' or 'pengelola' role cannot create destination documents.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /destinations/{destinationId} {
      // Public read access to destinations
      allow get, list: if true;

      // Only admins and pengelola can create, update, and delete destinations
      allow create: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
      allow update: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
      allow delete: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
    }

    /**
     * @description Controls access to destination category documents.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read destination category information.
     * @allow (create) User with 'admin' or 'pengelola' role can create category documents.
     * @deny (create) User without 'admin' or 'pengelola' role cannot create category documents.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /categories/{categoryId} {
      // Public read access to categories
      allow get, list: if true;

      // Only admins and pengelola can create, update, and delete categories
      allow create: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
      allow update: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
      allow delete: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
    }

    /**
     * @description Controls access to country documents.
     * @path /countries/{countryId}
     * @allow (get, list) Any user can read country information.
     * @allow (create) User with 'admin' or 'pengelola' role can create country documents.
     * @deny (create) User without 'admin' or 'pengelola' role cannot create country documents.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /countries/{countryId} {
        // Public read access to countries
        allow get, list: if true;

        // Only admins and pengelola can create, update, and delete countries
        allow create: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
        allow update: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
        allow delete: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
    }

    /**
     * @description Controls access to visit data documents under a specific destination.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list) Any user can read visit data information.
     * @allow (create, update, delete) User with 'admin' or 'pengelola' role or assigned to the destination can create, update and delete visit data documents.
     * @deny (create, update, delete) User without 'admin' or 'pengelola' role and not assigned to the destination cannot create, update and delete visit data documents.
     * @principle Restricts write access to authorized users or those assigned to the destination.
     */
    match /destinations/{destinationId}/visits/{visitId} {
      allow get, list: if true;
      allow create: if isSignedIn() && (hasAnyRole(['admin', 'pengelola']) || isDestinationManager(destinationId));
      allow update: if isSignedIn() && (hasAnyRole(['admin', 'pengelola']) || isDestinationManager(destinationId)) && resource != null;
      allow delete: if isSignedIn() && (hasAnyRole(['admin', 'pengelola']) || isDestinationManager(destinationId)) && resource != null;
    }

    /**
     * @description Controls access to unlock request documents.
     * @path /unlock-requests/{requestId}
     * @allow (create) User with 'admin' or 'pengelola' role can create unlock request documents.
     * @allow (update) Only users with 'admin' or 'pengelola' roles can update the status of an unlock request.
     * @deny (create, update, delete) User without 'admin' or 'pengelola' role cannot create, update and delete unlock request documents.
     * @principle Restricts write access to authorized users.
     */
    match /unlock-requests/{requestId} {
        allow get: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
        allow list: if isSignedIn() && hasAnyRole(['admin', 'pengelola']);
        allow create: if isSignedIn() && (hasAnyRole(['pengelola'])); // Only pengelola can request unlock
        allow update: if isSignedIn() && hasAnyRole(['admin']) && resource != null; // Only admin can update
        allow delete: if false; // No one can delete unlock requests
    }

    /**
     * @description Controls access to application settings document.
     * @path /settings/app
     * @allow (get) Any user can read application settings.
     * @allow (update) Only users with 'admin' role can update application settings.
     * @deny (create, update, delete) User without 'admin' role cannot create, update and delete application settings.
     * @principle Restricts write access to authorized users.
     */
    match /settings/app {
        allow get: if true;
        allow list: if false;

        allow create: if false;
        allow update: if isSignedIn() && hasAnyRole(['admin']) && resource != null;
        allow delete: if false;
    }

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function hasAnyRole(roles) {
      return isSignedIn() && (request.auth.token.role in roles);
    }

    // Check if the user is a manager of the specified destination
    function isDestinationManager(destinationId) {
        return isSignedIn() && (destinationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations);
    }
  }
}