/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership constraints.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Accessible only to the owner.
 * - /destinations/{destinationId}: Stores tourist destination information. Publicly readable, but writes are restricted.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable, but writes are restricted.
 * - /countries/{countryId}: Stores countries for visitor data. Publicly readable, but writes are restricted.
 * - /destinations/{destinationId}/visits/{visitId}: Stores monthly visit data. Restricted to authorized users based on assigned locations and roles.
 * - /unlock-requests/{requestId}: Stores unlock requests for visit data. Restricted to authorized users based on roles.
 * - /settings/app: Stores global app settings. Writes are restricted.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - All write operations require authentication.
 * - Role-based access control is used to manage permissions for visit data and unlock requests.
 *
 * Denormalization for Authorization:
 * - The `assignedLocations` field in the UserProfile is used to determine which destinations a user can manage.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the UID matches.
     * @allow (get) - User can read their own profile.
     * @allow (update) - User can update their own profile.
     * @allow (delete) - User can delete their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - User cannot create a profile with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures tourist destinations.
     * @path /destinations/{destinationId}
     * @allow (get, list) - All users can read destination data.
     * @deny (create, update, delete) - Only authorized users can modify destination data.
     * @principle Public read with restricted writes.
     */
    match /destinations/{destinationId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin() || isPengelola(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secures destination categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - All users can read category data.
     * @deny (create, update, delete) - Only authorized users can modify category data.
     * @principle Public read with restricted writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin() || isPengelola(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secures country data.
     * @path /countries/{countryId}
     * @allow (get, list) - All users can read country data.
     * @deny (create, update, delete) - Only authorized users can modify country data.
     * @principle Public read with restricted writes.
     */
    match /countries/{countryId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin() || isPengelola(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secures monthly visit data for destinations.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list) - All users can read visit data.
     * @deny (create, update, delete) - Only authorized users can modify visit data.
     * @principle Role-based access control for visit data.
     */
    match /destinations/{destinationId}/visits/{visitId} {
        allow get, list: if true;
        allow create: if isSignedIn() && (isAdmin() || (isPengelola() && isAssignedDestination(destinationId)));
        allow update: if isSignedIn() && resource != null && (isAdmin() || (isPengelola() && isAssignedDestination(destinationId)));
        allow delete: if isSignedIn() && resource != null && (isAdmin() || (isPengelola() && isAssignedDestination(destinationId)));
    }

    /**
     * @description Secures unlock requests.
     * @path /unlock-requests/{requestId}
     * @allow (create) - Users can create unlock requests.
     * @deny (get, list, update, delete) - Only admins can read and manage unlock requests.
     */
    match /unlock-requests/{requestId} {
        allow create: if isSignedIn() && isPengelola();
        allow get, list: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin() && resource != null;
        allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Secures global application settings.
     * @path /settings/app
     * @allow (get) - All users can read app settings.
     * @deny (create, update, delete, list) - Only authorized users can modify app settings.
     * @principle Public read with restricted writes.
     */
    match /settings/app {
        allow get: if true;
        allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow list: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isPengelola() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola';
    }

    function isAssignedDestination(destinationId) {
        return isSignedIn() && destinationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations;
    }
  }
}