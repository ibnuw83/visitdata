/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership checks for specific data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user and admins.
 * - /destinations/{destinationId}: Stores destination data, publicly readable, but write-protected, managed by designated 'pengelola' users for the specified destination and admins.
 * - /categories/{categoryId}: Stores destination categories, publicly readable, but write-protected.
 * - /countries/{countryId}: Stores country data, publicly readable, but write-protected.
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data, only accessible by admins and 'pengelola' users for that destination.
 * - /unlock-requests/{requestId}: Stores unlock requests, accessible by admins and the user who created the request.
 * - /settings/app: Stores global app settings, only accessible by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - 'pengelola' users can only modify data for destinations assigned to them via the `assignedLocations` field in their profile.
 * - Data integrity is enforced by validating relationships between documents (e.g., `destinationId` in visit data and unlock requests).
 *
 * Denormalization for Authorization:
 * - User roles (`admin`, `pengelola`) are stored directly in the user profile document, avoiding the need for separate role lookups.
 * - Destination assignments are stored in the user profile, enabling efficient checks for 'pengelola' access to destination-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user exists and owns the document.
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user has the 'pengelola' role.
     */
    function isPengelola() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola';
    }

    /**
     * @description Checks if the user is a 'pengelola' and is assigned to the destination.
     * @param {string} destinationId - The destination ID to check.
     */
    function isAssignedPengelola(destinationId) {
      return isPengelola() && destinationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - auth.uid: 'user123'
     *   - request.resource.data.uid: 'user123'
     * @allow (get) User with ID 'user123' reads their profile.
     *   - auth.uid: 'user123'
     * @allow (update) Admin updates user with ID 'user123' profile.
     *   - auth.uid: 'admin456'
     *   - user role: 'admin'
     * @deny (create) User with ID 'user123' tries to create a profile with a different ID.
     *   - auth.uid: 'user123'
     *   - request.resource.data.uid: 'user456'
     * @deny (update) User with ID 'user123' tries to update another user's profile.
     *   - auth.uid: 'user123'
     * @principle Enforces user ownership and admin overrides.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for destinations.
     * @path /destinations/{destinationId}
     * @allow (get) Any user reads a destination.
     *   - auth.uid: null
     * @allow (create) Admin creates a destination.
     *   - auth.uid: 'admin123'
     *   - user role: 'admin'
     * @allow (update) User with role 'pengelola' updates destination.
     *   - auth.uid: 'pengelola456'
     *   - user role: 'pengelola'
     *   - assignedLocations: ['destination123']
     * @deny (create) Non-admin user tries to create a destination.
     *   - auth.uid: 'user123'
     * @deny (update) Non-assigned 'pengelola' tries to update a destination.
     *   - auth.uid: 'pengelola789'
     *   - user role: 'pengelola'
     *   - assignedLocations: ['destination456']
     * @principle Public read, restricted writes to admins and assigned 'pengelola' users.
     */
    match /destinations/{destinationId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() || isAssignedPengelola(destinationId);
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for destination categories.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read a category.
     *   - auth.uid: null
     * @allow (create) Admin creates a category.
     *   - auth.uid: 'admin123'
     *   - user role: 'admin'
     * @deny (create) Non-admin user tries to create a category.
     *   - auth.uid: 'user123'
     * @principle Public read, restricted writes to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for countries.
     * @path /countries/{countryId}
     * @allow (get) Any user can read a country.
     *   - auth.uid: null
     * @allow (create) Admin creates a country.
     *   - auth.uid: 'admin123'
     *   - user role: 'admin'
     * @deny (create) Non-admin user tries to create a country.
     *   - auth.uid: 'user123'
     * @principle Public read, restricted writes to admins.
     */
    match /countries/{countryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for visit data.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get) Any user can read visit data.
     *   - auth.uid: null
     * @allow (create) Admin creates visit data.
     *   - auth.uid: 'admin123'
     *   - user role: 'admin'
     * @allow (update) User with role 'pengelola' updates visit data.
     *   - auth.uid: 'pengelola456'
     *   - user role: 'pengelola'
     *   - assignedLocations: ['destination123']
     * @deny (create) Non-admin user tries to create visit data.
     *   - auth.uid: 'user123'
     * @deny (update) Non-assigned 'pengelola' tries to update visit data.
     *   - auth.uid: 'pengelola789'
     *   - user role: 'pengelola'
     *   - assignedLocations: ['destination456']
     * @principle Public read, restricted writes to admins and assigned 'pengelola' users.
     */
    match /destinations/{destinationId}/visits/{visitId} {
      allow get, list: if true;
      allow create: if isAdmin() || isAssignedPengelola(destinationId);
      allow update: if isAdmin() || isAssignedPengelola(destinationId);
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for unlock requests.
     * @path /unlock-requests/{requestId}
     * @allow (create) Signed-in user creates an unlock request.
     *   - auth.uid: 'user123'
     *   - request.resource.data.requestedBy: 'user123'
     * @allow (get) Admin or the requesting user reads an unlock request.
     *   - auth.uid: 'admin456' or 'user123'
     * @allow (update) Admin updates the status of an unlock request.
     *   - auth.uid: 'admin456'
     *   - user role: 'admin'
     * @deny (create) User tries to create an unlock request for another user.
     *   - auth.uid: 'user123'
     *   - request.resource.data.requestedBy: 'user456'
     * @deny (update) Non-admin user tries to update an unlock request.
     *   - auth.uid: 'user123'
     * @principle Enforces user ownership for creation, admin control for updates, and restricts access based on role and ownership.
     */
    match /unlock-requests/{requestId} {
      allow get: if isAdmin() || request.auth.uid == resource.data.requestedBy;
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.requestedBy == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Rules for app settings.
     * @path /settings/app
     * @allow (get) Any user can read app settings.
     *   - auth.uid: null
     * @allow (update) Admin updates app settings.
     *   - auth.uid: 'admin123'
     *   - user role: 'admin'
     * @deny (update) Non-admin user tries to update app settings.
     *   - auth.uid: 'user123'
     * @principle Public read, restricted writes to admins.
     */
    match /settings/app {
      allow get, list: if true;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }
  }
}