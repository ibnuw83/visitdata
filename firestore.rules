/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on user roles and resource ownership,
 * while remaining flexible on data shapes to facilitate rapid prototyping. Data validation is minimal.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Access is restricted: user data cannot be listed.
 * - /destinations/{destinationId}: Stores information about tourist destinations. Publicly readable, owner-only writes.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable, owner-only writes.
 * - /countries/{countryId}: Stores countries data. Publicly readable, owner-only writes.
 * - /destinations/{destinationId}/visits/{visitId}: Stores monthly visit data for destinations. Only accessible by authorized users.
 * - /unlock-requests/{requestId}: Stores unlock requests.
 * - /settings/app: Stores global application settings. Publicly readable, owner-only writes.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed to protect user privacy.
 * - Public read access is granted to certain collections to facilitate data discovery, but write access is strictly controlled.
 * - The rules prioritize the enforcement of authorization over data validation, allowing for flexibility during prototyping.
 *
 * Denormalization for Authorization:
 * - The `VisitData` and `UnlockRequest` schemas include `destinationId` to simplify access control based on destination ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profiles collection. User data cannot be listed, only individual profiles can be accessed, created, and updated by the user themselves.
     * @path /users/{userId}
     * @allow (get) - Authenticated user can get their own profile.
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (update) - Authenticated user can update their own profile if the userId matches their auth.uid.
     * @deny (list) - User data cannot be listed to protect user privacy.
     * @deny (delete) - Users cannot delete their profiles.
     * @deny (create) - Authenticated user cannot create other user profiles
     * @deny (update) - Authenticated user cannot update other user profiles
     * @principle Enforces user-ownership for profile reads and writes. User listing is explicitly disallowed.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description Secures the destinations collection.
     * @path /destinations/{destinationId}
     * @allow (get, list) - Anyone can read destinations.
     * @allow (create) - Only authenticated users can create destinations, and the 'id' field must match the destinationId.
     * @allow (update, delete) - Only the user who created the destination can update or delete it. Requires 'ownerId' field in destination document.
     * @deny (create) - If the 'ownerId' field does not match the authenticated user's UID.
     * @deny (update, delete) - If the destination does not exist.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /destinations/{destinationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures the categories collection.
     * @path /categories/{categoryId}
     * @allow (get, list) - Anyone can read categories.
     * @allow (create) - Only authenticated users can create categories, and the 'id' field must match the categoryId.
     * @allow (update, delete) - Only the user who created the category can update or delete it. Requires 'ownerId' field in category document.
     * @deny (create) - If the 'ownerId' field does not match the authenticated user's UID.
     * @deny (update, delete) - If the category does not exist.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Secures the countries collection.
     * @path /countries/{countryId}
     * @allow (get, list) - Anyone can read countries.
     * @allow (create) - Only authenticated users can create countries, and the 'code' field must match the countryId.
     * @allow (update, delete) - Only the user who created the country can update or delete it. Requires 'ownerId' field in country document.
     * @deny (create) - If the 'ownerId' field does not match the authenticated user's UID.
     * @deny (update, delete) - If the country does not exist.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /countries/{countryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures the visits subcollection under each destination.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list) - Anyone can read visit data.
     * @allow (create) - Only authenticated users can create visit data.
     * @allow (update, delete) - Only the user who created the visit data can update or delete it.
     * @deny (create, update, delete) - If the parent destination does not exist.
     * @principle Restricts access to visit data based on destination ownership.
     */
    match /destinations/{destinationId}/visits/{visitId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures the unlock requests collection.
     * @path /unlock-requests/{requestId}
     * @allow (get, list) - Only authenticated users can get unlock requests.
     * @allow (create) - Only authenticated users can create unlock requests.
     * @allow (update, delete) - Only the user who created the unlock request can update or delete it.
     * @principle Restricts access to unlock requests based on request ownership.
     */
    match /unlock-requests/{requestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Secures the app settings document.
     * @path /settings/app
     * @allow (get) - Anyone can read app settings.
     * @allow (update) - Only authenticated users can update app settings.
     * @deny (create, delete) - App settings can only be updated, not created or deleted.
     * @principle Allows public read access but restricts write access to authenticated users.
     */
    match /settings/app {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow create: if false;
      allow update: if isSignedIn();
      allow delete: if false;
      allow list: if false;
    }
  }
}