/**
 * @fileoverview Firestore Security Rules for the Wisata app.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It implements a combination of role-based access control (RBAC) and
 * ownership-based access control, with the strictest interpretation applied
 * when ambiguity exists. The rules are designed to prevent unauthorized
 * data modification and ensure data integrity.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /destinations/{destinationId}: Stores information about tourist destinations.
 *   Write access restricted to admins and assigned pengelola users.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable, writeable only by admins.
 * - /countries/{countryId}: Stores country data. Publicly readable, writeable only by admins.
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data for each destination,
 *   accessible to admins and assigned pengelola users for the destination.
 *   visitId is in the format YYYY-MM.
 * - /unlock-requests/{requestId}: Stores requests to unlock data for specific destinations and periods.
 *   Accessible to the requester and admins, with status updates restricted to admins.
 * - /settings/app: Stores global application settings, writeable only by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized data scraping.
 * - Strict ownership model for user profiles: users can only access their own profiles.
 * - Admins have broad access to manage destinations, categories, countries, visit data, and unlock requests.
 * - Pengelola users can only modify destinations and visit data for their assigned locations.
 * - All write operations require authentication.
 * - Data validation is limited to authorization-critical fields for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - User profiles include an 'assignedLocations' field, an array of destination IDs managed by the user.
 *   This denormalization is used to efficiently authorize pengelola users to manage destinations
 *   and visit data. Without it, authorization rules would require expensive and potentially
 *   impossible `get()` operations to fetch assigned locations from a separate collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    //Global helper function to determine if a user is signed in
    function isSignedIn() {
        return request.auth != null;
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner of the profile.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the request originates from the profile owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the profile already exists and is owned by the user.
      function isExistingOwner(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data.uid == request.auth.uid;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to destination documents.
     * @path /destinations/{destinationId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if the user is an admin or a pengelola assigned to the destination.
     * @deny (create, update, delete) if the user is not authenticated.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /destinations/{destinationId} {
      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      function isPengelolaForDestination(destinationId) {
        return isSignedIn() && request.auth.token.role == 'pengelola' && request.auth.token.assignedLocations is list && request.auth.token.assignedLocations.hasAny([destinationId]);
      }

      function canWriteDestination(destinationId) {
          return isAdmin() || isPengelolaForDestination(destinationId);
      }
      allow get, list: if true;
      allow create: if canWriteDestination(destinationId);
      allow update: if canWriteDestination(destinationId);
      allow delete: if canWriteDestination(destinationId);
    }

    /**
     * @description Controls access to category documents.
     * @path /categories/{categoryId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Allows public read access but restricts write access to administrators.
     */
    match /categories/{categoryId} {
      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

       /**
        * @description Controls access to country documents.
        * @path /countries/{countryId}
        * @allow (get, list) if true
        * @allow (create, update, delete) if the user is an admin.
        * @deny (create, update, delete) if the user is not an admin.
        * @principle Allows public read access but restricts write access to administrators.
        */
      match /countries/{countryId} {
        function isAdmin() {
          return isSignedIn() && request.auth.token.role == 'admin';
        }

        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      /**
       * @description Controls access to visit data documents.
       * @path /destinations/{destinationId}/visits/{visitId}
       * @allow (get, list) if true
       * @allow (create, update, delete) if the user is an admin or a pengelola assigned to the destination.
       * @deny (create, update, delete) if the user is not authenticated.
       * @principle Allows public read access but restricts write access to authorized users.
       */
      match /destinations/{destinationId}/visits/{visitId} {
        function isAdmin() {
          return isSignedIn() && request.auth.token.role == 'admin';
        }

        function isPengelolaForDestination(destinationId) {
          return isSignedIn() && request.auth.token.role == 'pengelola' && request.auth.token.assignedLocations is list && request.auth.token.assignedLocations.hasAny([destinationId]);
        }

        function canWriteVisitData(destinationId) {
            return isAdmin() || isPengelolaForDestination(destinationId);
        }
        allow get, list: if true;
        allow create: if canWriteVisitData(destinationId);
        allow update: if canWriteVisitData(destinationId);
        allow delete: if canWriteVisitData(destinationId);
      }

      /**
       * @description Controls access to unlock request documents.
       * @path /unlock-requests/{requestId}
       * @allow (get) if the user is the requester or an admin.
       * @allow (create) if the user is authenticated.
       * @allow (update) if the user is an admin and only updates the status.
       * @deny (delete) always.
       * @principle Restricts access to unlock requests to the requester and admins, with status updates limited to admins.
       */
      match /unlock-requests/{requestId} {
        function isAdmin() {
          return isSignedIn() && request.auth.token.role == 'admin';
        }

        function isRequester(requestId) {
          return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/unlock-requests/$(requestId)).data.requestedBy;
        }

        allow get: if isAdmin() || isRequester(requestId);
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isAdmin() && request.resource.data.status in ["pending", "approved", "rejected"];
        allow delete: if false;
      }

      /**
       * @description Controls access to the app settings document.
       * @path /settings/app
       * @allow (get) if true
       * @allow (create, update, delete) if the user is an admin.
       * @deny (create, update, delete) if the user is not an admin.
       * @principle Allows public read access but restricts write access to administrators.
       */
      match /settings/app {
        function isAdmin() {
          return isSignedIn() && request.auth.token.role == 'admin';
        }

        allow get: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
  }
}