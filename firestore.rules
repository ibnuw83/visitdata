rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (read, write) if the user's ID matches the document ID.
     * @deny (read, write) if the user is trying to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure tourist destinations.
     * @path /destinations/{destinationId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) to users with 'admin' role or 'pengelola' role who is assigned to the destination.
     * @deny (create, update, delete) to unauthorized users.
     * @principle Enforces role-based access control for destination management.
     */
    match /destinations/{destinationId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() || (isPengelola() && isAssignedDestination(destinationId));
      allow delete: if isAdmin();
    }

    /**
     * @description Secure destination categories. Categories are publicly readable.
     * @path /categories/{categoryId}
     * @allow (read) to anyone.
     * @deny (write) to everyone.
     * @principle Allows public read access to destination categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure countries data. Countries data is publicly readable.
     * @path /countries/{countryId}
     * @allow (read) to anyone.
     * @deny (write) to everyone.
     * @principle Allows public read access to countries data.
     */
    match /countries/{countryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure monthly visit data for destinations.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) to users with 'admin' role or 'pengelola' role assigned to the destination.
     * @deny (create, update, delete) to unauthorized users.
     * @principle Enforces role-based access control for visit data management.
     */
    match /destinations/{destinationId}/visits/{visitId} {
      allow get, list: if true;
      allow create: if isAdmin() || (isPengelola() && isAssignedDestination(destinationId));
      allow update: if isAdmin() || (isPengelola() && isAssignedDestination(destinationId));
      allow delete: if isAdmin() || (isPengelola() && isAssignedDestination(destinationId));
    }

    /**
     * @description Secure unlock requests.
     * @path /unlock-requests/{requestId}
     * @allow (create) to signed-in users.
     * @allow (get, list, update) to admins only.
     * @deny (delete) to everyone.
     * @principle Restricts unlock request management to administrators.
     */
    match /unlock-requests/{requestId} {
      allow get, list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Secure application settings. App settings are publicly readable.
     * @path /settings/app
     * @allow (read) to anyone.
     * @deny (write) to everyone.
     * @principle Allows public read access to app settings.
     */
    match /settings/app {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
  }

  function isPengelola() {
    return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola';
  }

  function isAssignedDestination(destinationId) {
    let userRecord = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    return isSignedIn() && (userRecord.assignedLocations is list && destinationId in userRecord.assignedLocations);
  }
}