/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership constraints.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.  Accessible only by the user themselves and admins.
 * - /destinations/{destinationId}: Stores tourist destination information. Publicly readable, writable by 'pengelola' and 'admin' roles.
 * - /categories/{categoryId}: Stores destination categories. Publicly readable, writable by 'admin' roles only.
 * - /countries/{countryId}: Stores countries data. Publicly readable, writable by 'admin' roles only.
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data for destinations. Only 'pengelola' for the destination and 'admin' can write. Readable by all.
 * - /unlock-requests/{requestId}: Stores requests to unlock visit data. Only 'pengelola' can create, 'admin' can update/delete. Readable by all.
 * - /settings/app: Stores global app settings.  Writable by 'admin' only, readable by all.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Data validation is minimized to support rapid prototyping.  Focus is on authorization.
 * - Role-based access control is used for administrative functions.
 *
 * Denormalization for Authorization:
 * - The `assignedLocations` field in the `/users/{userId}` document is used to determine which destinations a 'pengelola' user can manage.  This avoids needing to query across collections to determine authorization.
 * - The `destinationName` field is copied into `unlock-requests` to simplify listing and filtering unlock requests.
 *
 * Structural Segregation:
 * - No private subcollections under `/users/{userId}` are currently defined, but could be added in the future for user-specific private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching {userId} can create their profile.
     * @allow (get, update, delete) User with matching {userId} can read, update, and delete their profile. Admin users can read, update, and delete all profiles.
     * @deny (list) User listing is not allowed.
     * @deny (create, update, delete) Non-matching user IDs are rejected.
     * @principle Enforces document ownership and role-based access control.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Manages tourist destination data.
     * @path /destinations/{destinationId}
     * @allow (get, list) All users can read destination data.
     * @allow (create, update, delete) Only 'pengelola' and 'admin' roles can modify destination data.
     * @deny (create, update, delete) Unauthorized users cannot modify destination data.
     * @principle Enforces role-based access control.
     */
    match /destinations/{destinationId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isPengelola() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola';
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function isDestinationAssignedToPengelola(destinationId) {
        return isSignedIn() && (destinationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations);
      }

      function canManageDestination(destinationId) {
          return isAdmin() || (isPengelola() && isDestinationAssignedToPengelola(destinationId));
      }

        function existingDestinationExists() {
            return resource != null;
        }

      allow get, list: if true;
      allow create: if canManageDestination(destinationId);
      allow update: if existingDestinationExists() && canManageDestination(destinationId);
      allow delete: if existingDestinationExists() && canManageDestination(destinationId);

      /**
       * @description Manages monthly visit data for each destination.
       * @path /destinations/{destinationId}/visits/{visitId}
       * @allow (get, list) All users can read visit data.
       * @allow (create, update, delete) Only 'pengelola' for the destination and 'admin' can modify visit data.
       * @deny (create, update, delete) Unauthorized users cannot modify visit data.
       * @principle Enforces role-based access control and data ownership.
       */
      match /destinations/{destinationId}/visits/{visitId} {

        function isSignedIn() {
          return request.auth != null;
        }

        function isPengelola() {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola';
        }

        function isAdmin() {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        function isDestinationAssignedToPengelola(destinationId) {
          return isSignedIn() && (destinationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations);
        }

        function canManageDestination(destinationId) {
            return isAdmin() || (isPengelola() && isDestinationAssignedToPengelola(destinationId));
        }

          function existingVisitDataExists() {
              return resource != null;
          }

        allow get, list: if true;
        allow create: if canManageDestination(destinationId);
        allow update: if existingVisitDataExists() && canManageDestination(destinationId);
        allow delete: if existingVisitDataExists() && canManageDestination(destinationId);
      }
    }

    /**
     * @description Manages destination category data.
     * @path /categories/{categoryId}
     * @allow (get, list) All users can read category data.
     * @allow (create, update, delete) Only 'admin' roles can modify category data.
     * @deny (create, update, delete) Unauthorized users cannot modify category data.
     * @principle Enforces role-based access control.
     */
    match /categories/{categoryId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function existingCategoryExists() {
          return resource != null;
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if existingCategoryExists() && isAdmin();
      allow delete: if existingCategoryExists() && isAdmin();
    }

      /**
       * @description Manages country data.
       * @path /countries/{countryId}
       * @allow (get, list) All users can read country data.
       * @allow (create, update, delete) Only 'admin' roles can modify country data.
       * @deny (create, update, delete) Unauthorized users cannot modify country data.
       * @principle Enforces role-based access control.
       */
    match /countries/{countryId} {

        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        function existingCountryExists() {
            return resource != null;
        }

        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if existingCountryExists() && isAdmin();
        allow delete: if existingCountryExists() && isAdmin();
    }

    /**
     * @description Manages unlock requests for visit data.
     * @path /unlock-requests/{requestId}
     * @allow (get, list) All users can read unlock requests.
     * @allow (create) Only 'pengelola' can create unlock requests.
     * @allow (update, delete) Only 'admin' can update/delete unlock requests.
     * @deny (create) Unauthorized users cannot create unlock requests.
     * @deny (update, delete) Unauthorized users cannot modify unlock requests.
     * @principle Enforces role-based access control.
     */
    match /unlock-requests/{requestId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isPengelola() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola';
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function existingUnlockRequestExists() {
          return resource != null;
      }

      allow get, list: if true;
      allow create: if isPengelola() && request.resource.data.requestedBy == request.auth.uid;
      allow update: if existingUnlockRequestExists() && isAdmin();
      allow delete: if existingUnlockRequestExists() && isAdmin();
    }

    /**
     * @description Manages global application settings.
     * @path /settings/app
     * @allow (get, list) All users can read app settings.
     * @allow (create, update, delete) Only 'admin' can modify app settings.
     * @deny (create, update, delete) Unauthorized users cannot modify app settings.
     * @principle Enforces role-based access control.
     */
    match /settings/app {

      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

        function existingAppSettingsExists() {
            return resource != null;
        }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if existingAppSettingsExists() && isAdmin();
      allow delete: if existingAppSettingsExists() && isAdmin();
    }
  }
}