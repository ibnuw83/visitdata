rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    // Efficiently checks if the requesting user is an admin by looking for their UID in the /admins collection.
    // This is the standard, recommended way to handle roles.
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- Collections ---

    // Admin role markers. Only admins can see who else is an admin.
    match /admins/{userId} {
      allow read, write: if isAdmin();
    }

    // User profiles.
    match /users/{userId} {
      // An admin can list all users. This fixes the "daftar pengguna tidak tampil" issue.
      allow list: if isAdmin();
      // An admin can get any user's profile. A regular user can only get their own.
      allow get: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      // A user can update their own profile. An admin can update any profile.
      allow update: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      // Only admins can create or delete user profiles.
      allow create, delete: if isAdmin();
    }

    // Destinations are public to read for anyone, but only writable by admins.
    match /destinations/{destinationId} {
      allow read: if true;
      allow write: if isAdmin();

      // Visit data can be read by admins, and written by admins or assigned managers.
      match /visits/{visitId} {
        // We use get() here on the user's profile to check their assignedLocations.
        // This is safe because it's not inside a 'list' rule.
        allow read, write: if isAdmin() || (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola' &&
          destinationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations
        );
      }
    }

    // Categories, Countries are public to read, but only writable by admins.
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /countries/{countryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // App settings and unlock requests are admin-only.
    match /settings/{docId} {
      allow read, write: if isAdmin();
    }
    match /unlock-requests/{requestId} {
      // Pengelola can create requests. Admin can manage them.
      allow create: if isSignedIn();
      allow read, update, delete, list: if isAdmin();
    }
  }
}
