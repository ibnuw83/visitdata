/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-layered security model with ownership, roles, and shared access patterns.
 * User profiles are owner-controlled. Destinations and Categories are publicly readable but only modifiable by authorized users.
 * Visit data is restricted to authorized users with specific logic around locked status and unlock requests.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /destinations/{destinationId}: Stores destination information, publicly readable, but write access is role-based.
 * - /categories/{categoryId}: Stores category information, publicly readable, but write access is role-based.
 * - /countries/{countryId}: Stores countries information, publicly readable, but write access is role-based.
 * - /destinations/{destinationId}/visits/{visitId}: Stores visit data for each destination, access controlled by user role and locked status.
 * - /unlock-requests/{requestId}: Stores requests to unlock visit data, access controlled by user role.
 * - /settings/app: Stores global app settings, only accessible to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 * - Role `pengelola` will have access to write `VisitData` based on field `assignedLocations` inside user document.
 *
 * Denormalization for Authorization:
 * - The rules do not rely on denormalization.
 *
 * Structural Segregation:
 * - The application uses separate collections for different types of data with varying access requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isPengelola(destinationId) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola'
        && (destinationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations);
    }

    /**
     * @description Grants access to user profiles. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile if request.auth.uid == 'abc'.
     * @deny (create) - User 'def' cannot create a profile for user 'abc'.
     * @allow (get, update, delete) - User 'abc' can get, update, and delete their profile.
     * @deny (get, update, delete) - User 'def' cannot get, update, or delete user 'abc's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants public read access to destinations, but restricts write access to admins.
     * @path /destinations/{destinationId}
     * @allow (get, list) - Any user can read destination data.
     * @allow (create, update, delete) - Only admins can create, update, or delete destinations.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete destinations.
     * @principle Public read access with role-based write restrictions.
     */
    match /destinations/{destinationId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to categories, but restricts write access to admins.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read category data.
     * @allow (create, update, delete) - Only admins can create, update, or delete categories.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete categories.
     * @principle Public read access with role-based write restrictions.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to countries, but restricts write access to admins.
     * @path /countries/{countryId}
     * @allow (get, list) - Any user can read country data.
     * @allow (create, update, delete) - Only admins can create, update, or delete countries.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete countries.
     * @principle Public read access with role-based write restrictions.
     */
    match /countries/{countryId} {
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to visit data. Allows admins to manage all data, and pengelola to write data assigned to them.
     * @path /destinations/{destinationId}/visits/{visitId}
     * @allow (get, list) - Any authenticated user can read visit data.
     * @allow (create, update) - Admins and pengelola assigned to the destination can create and update visit data if the data is not locked.
     * @allow (delete) - Only admins can delete visit data.
     * @deny (create, update) - Pengelola cannot update locked visit data.
     * @principle Role-based access control with data locking mechanism.
     */
    match /destinations/{destinationId}/visits/{visitId} {
        allow get, list: if isSignedIn();
        allow create: if (isAdmin() || (isPengelola(destinationId) && request.resource.data.locked == false));
        allow update: if (isAdmin() || (isPengelola(destinationId) && resource.data.locked == false));
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to unlock requests. Allows admins to manage all requests, and users to create their own requests.
     * @path /unlock-requests/{requestId}
     * @allow (get, list) - Authenticated users can view unlock requests.
     * @allow (create) - Users can create their own unlock requests.
     * @allow (update) - Only admins can update unlock request statuses.
     * @principle User-initiated requests with admin approval workflow.
     */
    match /unlock-requests/{requestId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.requestedBy == request.auth.uid;
        allow update: if isAdmin();
        allow delete: if false;
    }

    /**
     * @description Restricts access to app settings to admins only.
     * @path /settings/app
     * @allow (get) - Any user can get app settings.
     * @allow (update) - Only admins can update app settings.
     * @principle Role-based access control for global settings.
     */
    match /settings/app {
        allow get: if true;
        allow create: if false;
        allow update: if isAdmin();
        allow delete: if false;
    }
  }
}