/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User profiles are secured under their respective user IDs. Destinations, categories, countries, and app settings are publicly readable but writable only by authorized roles.
 * Visit data is secured under destinations and can only be modified by pengelola roles assigned to that destination.
 * Unlock requests can be created by any signed-in user, but can only be approved/rejected by users with the "admin" role.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /destinations/{destinationId}: Stores destination information.
 * - /categories/{categoryId}: Stores destination categories.
 * - /countries/{countryId}: Stores country data.
 * - /destinations/{destinationId}/visits/{visitId}: Stores monthly visit data for destinations.
 * - /unlock-requests/{requestId}: Stores unlock requests.
 * - /settings/app: Stores application-wide settings.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profiles.
 * - Listing of users is disallowed for privacy.
 * - Destinations, categories, countries, and app settings are publicly readable to allow for wide data availability.
 * - "pengelola" roles have granular access to VisitData based on their assignedLocations.
 * - Only "admin" roles can update UnlockRequest statuses.
 * - The rules do not enforce strict data validation to allow for rapid schema iteration during prototyping.
 *
 * Denormalization for Authorization:
 * - The 'UserProfile' includes an `assignedLocations` array for simpler validation of VisitData edits.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the owner can read/write.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - User with matching UID can perform all operations on their profile.
     * @deny (get, create, update, delete) - Any other user attempting to access this profile.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is disallowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to destination data. Only users with 'admin' or 'pengelola' role can create, update, or delete destinations.
     * @path /destinations/{destinationId}
     * @allow (get, list) - Any user can read destination data.
     * @allow (create) - Only users with the 'admin' role can create destinations. The 'id' field must match the document ID.
     * @allow (update, delete) - Only users with the 'admin' role can update or delete existing destinations.
     * @deny (create, update, delete) - Users without the 'admin' role cannot perform write operations.
     * @principle Allows public reads while restricting writes to authorized users based on role.
     */
    match /destinations/{destinationId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function isPengelola() {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola';
      }

      function isExistingAdmin() {
          return isAdmin() && exists(/databases/$(database)/documents/destinations/$(destinationId));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && isExistingAdmin();
      allow delete: if isAdmin() && isExistingAdmin();
    }

    /**
     * @description Allows public read access to category data. Only users with 'admin' role can create, update, or delete categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read category data.
     * @allow (create) - Only users with the 'admin' role can create categories.
     * @allow (update, delete) - Only users with the 'admin' role can update or delete existing categories.
     * @deny (create, update, delete) - Users without the 'admin' role cannot perform write operations.
     * @principle Allows public reads while restricting writes to authorized users based on role.
     */
    match /categories/{categoryId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function isExistingAdmin() {
          return isAdmin() && exists(/databases/$(database)/documents/categories/$(categoryId));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && isExistingAdmin();
      allow delete: if isAdmin() && isExistingAdmin();
    }

      /**
       * @description Allows public read access to countries data. Only users with 'admin' role can create, update, or delete countries.
       * @path /countries/{countryId}
       * @allow (get, list) - Any user can read country data.
       * @allow (create) - Only users with the 'admin' role can create countries.
       * @allow (update, delete) - Only users with the 'admin' role can update or delete existing countries.
       * @deny (create, update, delete) - Users without the 'admin' role cannot perform write operations.
       * @principle Allows public reads while restricting writes to authorized users based on role.
       */
    match /countries/{countryId} {

        function isSignedIn() {
          return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        function isExistingAdmin() {
            return isAdmin() && exists(/databases/$(database)/documents/countries/$(countryId));
        }

        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && isExistingAdmin();
        allow delete: if isAdmin() && isExistingAdmin();
    }

      /**
       * @description Manages monthly visit data for destinations. Publicly readable, but only 'pengelola' users assigned to the specific destination can modify it.
       * @path /destinations/{destinationId}/visits/{visitId}
       * @allow (get, list) - Any user can read visit data.
       * @allow (create, update, delete) - Only users with 'pengelola' role AND are assigned to the 'destinationId' can perform write operations.
       * @deny (create, update, delete) - Users without the 'pengelola' role OR are not assigned to the 'destinationId' cannot perform write operations.
       * @principle Restricts write access to 'pengelola' roles with assigned location permissions.
       */
    match /destinations/{destinationId}/visits/{visitId} {

        function isSignedIn() {
            return request.auth != null;
        }

        function isPengelolaForDestination(destinationId) {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pengelola'
                && destinationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedLocations;
        }

        function isExistingPengelolaForDestination(destinationId) {
            return isPengelolaForDestination(destinationId) && exists(/databases/$(database)/documents/destinations/$(destinationId)/visits/$(visitId));
        }


        allow get: if true;
        allow list: if true;
        allow create: if isPengelolaForDestination(destinationId);
        allow update: if isPengelolaForDestination(destinationId) && isExistingPengelolaForDestination(destinationId);
        allow delete: if isPengelolaForDestination(destinationId) && isExistingPengelolaForDestination(destinationId);
    }

      /**
       * @description Manages unlock requests. Any signed-in user can create a request. Only 'admin' users can approve or reject requests.
       * @path /unlock-requests/{requestId}
       * @allow (create) - Any signed-in user can create unlock requests.
       * @allow (get) - Any signed-in user can get unlock requests.
       * @allow (update) - Only users with 'admin' role can update the status of the request.
       * @allow (list, delete) - Disabled operations.
       * @deny (create, update, delete) - Unauthorized users cannot perform write operations.
       * @principle Restricts unlock request management to 'admin' roles.
       */
    match /unlock-requests/{requestId} {

        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        function isExistingAdmin() {
            return isAdmin() && exists(/databases/$(database)/documents/unlock-requests/$(requestId));
        }


        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isAdmin() && isExistingAdmin();
        allow delete: if false;
    }

      /**
       * @description Allows public read access to app settings. Only users with 'admin' role can update the settings.
       * @path /settings/app
       * @allow (get, list) - Any user can read app settings.
       * @allow (update) - Only users with the 'admin' role can update app settings.
       * @allow (create, delete) - Disabled operations.
       * @deny (update) - Users without the 'admin' role cannot update the app settings.
       * @principle Allows public reads while restricting writes to authorized users based on role.
       */
    match /settings/app {

        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if isAdmin();
        allow delete: if false;
    }
  }
}